{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setStarted","isReversed","setReversed","NONE","sortType","setSortType","goods","typeOfSort","isReverse","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","sortGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,oDAbCC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAASH,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KA8CMC,EA5CY,SAChBA,EACAC,EACAC,GAEA,IAAMC,EAAY,YAAOH,GAazB,OAXAG,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQL,GACN,KAAKZ,EAASkB,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKjB,EAASoB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAO,MAINR,EACHC,EAAaQ,UACbR,EAwBQS,CAAUtB,EAAiBQ,EAAUH,GAEnD,OACE,sBAAKkB,UAAU,eAAf,WACIpB,GACA,wBACEqB,KAAK,SACLD,UAAU,iCACVE,QA7BM,kBACZrB,GAAW,IAyBP,mBASDD,GACC,qCACE,sBAAKoB,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAU,iBACVE,QArCe,kBACzBhB,EAAYV,EAASkB,WAiCb,iCAQA,wBACEO,KAAK,SACLD,UAAU,iBACVE,QAzCS,WACnBhB,EAAYV,EAASoB,SAqCb,4BAQA,wBACEK,KAAK,SACLD,UAAU,iBACVE,QA7CG,kBACbnB,GAAaD,IAyCL,qBAQA,wBACEmB,KAAK,SACLD,UAAU,gCACVE,QAjDE,WACZhB,EAAYV,EAASQ,MACrBD,GAAY,IA4CJ,sBASF,oBAAIiB,UAAU,QAAd,SACGb,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAIJ,UAAU,cAAd,SACGI,GAD8BA,eCzH/CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.725a06df.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [isStarted, setStarted] = useState(false);\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const sortGoods = (\n    goods: string[],\n    typeOfSort: SortType,\n    isReverse: boolean,\n  ) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((a, b) => {\n      switch (typeOfSort) {\n        case SortType.ALPHABET:\n          return a.localeCompare(b);\n        case SortType.LENGTH:\n          return a.length - b.length;\n        default:\n          return 0;\n      }\n    });\n\n    return isReverse\n      ? visibleGoods.reverse()\n      : visibleGoods;\n  };\n\n  const start = () => (\n    setStarted(true)\n  );\n\n  const sortAlphabetically = () => (\n    setSortType(SortType.ALPHABET)\n  );\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const revers = () => (\n    setReversed(!isReversed)\n  );\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setReversed(false);\n  };\n\n  const goods = sortGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"App is-light\">\n      {!isStarted && (\n        <button\n          type=\"button\"\n          className=\"button is-success button-start\"\n          onClick={start}\n        >\n          Start\n        </button>\n      )}\n\n      {isStarted && (\n        <>\n          <div className=\"buttons\">\n            <button\n              type=\"button\"\n              className=\"button is-dark\"\n              onClick={sortAlphabetically}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-dark\"\n              onClick={sortByLength}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-dark\"\n              onClick={revers}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button is-danger button-reset\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          </div>\n\n          <ul className=\"Goods\">\n            {goods.map(good => (\n              <li className=\"Goods__item\" key={good}>\n                {good}\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}